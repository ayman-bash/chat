# ChatFrar - Plateforme de Chat Moderne et Sécurisée

ChatFrar est une plateforme de chat moderne et sécurisée, conçue pour offrir une expérience utilisateur fluide et intuitive. Ce projet est réalisé dans le cadre d'un stage de fin d'études.

---

## **Fonctionnalités**

- **Authentification sécurisée** : Gestion des utilisateurs avec Supabase.
- **Chat en temps réel** : Communication instantanée avec Socket.IO.
- **Groupes et utilisateurs** : Création et gestion des groupes de discussion.
- **Assistant AI** : Intégration de Gemini AI pour répondre aux questions des utilisateurs.
- **Multimédia** : Prévisualisation des liens, intégration YouTube, lecteur audio.
- **Interface moderne** : Conçue avec React, TailwindCSS et Framer Motion.

---

## **Technologies Utilisées**

- **Frontend** : React, TypeScript, TailwindCSS, Framer Motion.
- **Backend** : Node.js, Express, Supabase.
- **Base de données** : PostgreSQL (via Supabase).
- **Temps réel** : Socket.IO.
- **Déploiement** : Vercel.

---

## **Installation et Configuration**

### **Prérequis**
- Node.js (version 18 ou supérieure)
- NPM ou Yarn
- Supabase (compte et projet configurés)
- Variables d'environnement configurées dans un fichier `.env`

### **Étapes d'installation**

1. **Cloner le dépôt**
   ```bash
   git clone https://github.com/votre-utilisateur/chatfrar.git
   cd chatfrar
   ```

2. **Installer les dépendances**
   ```bash
   npm install
   ```

3. **Configurer les variables d'environnement**
   Créez un fichier `.env` à la racine du projet et ajoutez les variables suivantes :
   ```properties
   VITE_SUPABASE_URL=Votre_URL_Supabase
   VITE_SUPABASE_ANON_KEY=Votre_Clé_Anonyme_Supabase
   VITE_GEMINI_API_KEY=Votre_Clé_API_Gemini
   VITE_BACKEND_URL=http://localhost:3000
   ```

4. **Démarrer le serveur backend**
   ```bash
   cd backend
   npm install
   npm start
   ```

5. **Démarrer le serveur frontend**
   ```bash
   cd ..
   npm run dev
   ```

6. **Accéder à l'application**
   Ouvrez votre navigateur et accédez à [http://localhost:5173](http://localhost:5173).
   ou bien taper o + click Enter .

---

## **Scripts Disponibles**

- `npm run dev` : Démarre le serveur de développement.
- `npm run build` : Compile l'application pour la production.
- `npm run preview` : Prévisualise l'application compilée.
- `npm run lint` : Analyse le code pour détecter les erreurs.

---

## **Structure du Projet**

```
chatfrar/
├── backend/                # Code backend (Node.js, Express)
├── src/                    # Code frontend (React, TypeScript)
│   ├── components/         # Composants réutilisables
│   ├── contexts/           # Contextes React
│   ├── pages/              # Pages principales
│   ├── services/           # Services API et Socket.IO
│   ├── utils/              # Fonctions utilitaires
│   └── index.css           # Styles globaux
├── .env                    # Variables d'environnement
├── package.json            # Dépendances et scripts
├── vite.config.ts          # Configuration Vite
└── supabase-migration.sql  # Script de migration pour Supabase
```

---

## **Déploiement**

1. **Configurer Vercel**
   - Connectez votre dépôt GitHub à Vercel.
   - Ajoutez les variables d'environnement dans les paramètres du projet Vercel.

2. **Déployer**
   Vercel détectera automatiquement la configuration et déploiera l'application.

---

## **Contributeurs**

- **Nom de l'étudiant** : Ahmed Bouachra
- **Encadrant académique** : Seydo BA
- **Encadrant professionnel** : **NaN**

---

## **Licence**

Ce projet est sous licence [MIT](https://opensource.org/licenses/MIT).